---

- name: filesystem -> format EFIfs
  filesystem:
    force: yes
    dev: "/dev/{{ storage.device }}{{ firmware.uefi.number }}"
    fstype: "{{ firmware.uefi.fs.type }}"
    opts: "{{ firmware.uefi.createOpt }}"
  when: efiFirmware.stat.exists

- name: filesystem -> format bootfs
  filesystem:
    force: yes
    dev: "/dev/{{ storage.device }}{{ storage.partitions.boot.number }}"
    fstype: "{{ storage.partitions.boot.decrypted.type }}"
    opts: "{{ storage.partitions.boot.decrypted.createOpt }}"

- name: filesystem -> format rootfs
  filesystem:
    force: yes
    dev: "/dev/mapper/{{ storage.partitions.root.label.mapper }}"
    fstype: "{{ storage.partitions.root.decrypted.type }}"
    opts: "{{ storage.partitions.root.decrypted.createOpt }}"

- block:
  - name: filesystem -> check for cryptdevice
    stat:
      path: '/dev/mapper/{{ storage.partitions.root.label.mapper }}'
    register: cryptdevice
  - name: filesystem -> open root cryptdevice
    shell:
      bash -c "echo '{{ cryptsetup.password }}' |
      cryptsetup
      luksOpen
      /dev/disk/by-partlabel/{{ storage.partitions.root.encrypted.label }}
      {{ storage.partitions.root.label.mapper }}"
    when: not cryptdevice.stat.exists

- block:
  - name: filesystem -> create folder {{ storage.mountPath }}.tmp
    shell: "/usr/bin/mkdir -p {{ storage.mountPath }}.tmp"
  - name: filesystem -> mount {{ storage.partitions.root.decrypted.label }} to {{ storage.mountPath }}.tmp
    shell: "/usr/bin/mount -L {{ storage.partitions.root.decrypted.label }} {{ storage.mountPath }}.tmp"
  - name: filesystem -> create subvolume {{ storage.partitions.root.decrypted.label }}{{ storage.partitions.root.decrypted.path }}
    shell: "/usr/bin/btrfs subvolume create {{ storage.mountPath }}.tmp{{ storage.partitions.root.decrypted.path }}"
  - name: filesystem -> create subvolume {{ storage.partitions.root.decrypted.label }}{{ item.path }}
    shell: "/usr/bin/btrfs subvolume create {{ storage.mountPath }}.tmp{{ item.path }}"
    with_items: "{{ storage.partitions.root.decrypted.subvolumes }}"
  - name: filesystem -> unmount {{ storage.partitions.root.decrypted.label }}
    shell: "/usr/bin/umount {{ storage.mountPath }}.tmp"
  - name: filesystem -> remove folder {{ storage.mountPath }}.tmp
    shell: "/usr/bin/rmdir {{ storage.mountPath }}.tmp"
  when: storage.partitions.root.decrypted.subvolumes is defined

...
